package warcraftTD.Levels;

import warcraftTD.Assets;
import warcraftTD.Position;
import warcraftTD.Tiles.Decor;
import warcraftTD.Tiles.Empty;
import warcraftTD.Tiles.Road;

public class Level2 extends Level {
    public Level2() {
        super();
        spritePath = Assets.level2;

        // remplie la liste de points par lequel les Bloons vont passer dans l'ordre.
        pathing.add(new Position(0.32741935483870965, 0));
        pathing.add(new Position(0.32741935483870965, 0.215));
        pathing.add(new Position(0.041935483870967745, 0.215));
        pathing.add(new Position(0.041935483870967745, 0.4847222222222223));
        pathing.add(new Position(0.1935483870967742, 0.4847222222222223));
        pathing.add(new Position(0.11693548387096774, 0.6236111111111111));
        pathing.add(new Position(0.21693548387096775, 0.8013888888888889));
        pathing.add(new Position(0.32903225806451614, 0.6486111111111111));
        pathing.add(new Position(0.32903225806451614, 0.8972222222222223));
        pathing.add(new Position(0.4814516129032258, 0.8972222222222223));
        pathing.add(new Position(0.4814516129032258, 0.6458333333333333));
        pathing.add(new Position(0.5903225806451613, 0.8083333333333333));
        pathing.add(new Position(0.6943548387096774, 0.6194444444444445));
        pathing.add(new Position(0.625, 0.4902777777777778));
        pathing.add(new Position(0.7709677419354839, 0.4902777777777778));
        pathing.add(new Position(0.7709677419354839, 0.215));
        pathing.add(new Position(0.4870967741935484, 0.215));
        pathing.add(new Position(0.4870967741935484, 0));
        pathing = roundPath(pathing, 3, false, 0.03);

        // remplie la map de vide,d'obstacles ou de route...

        decor[5][5] = true;
        decor[5][6] = true;
        decor[6][6] = true;
        decor[6][7] = true;
        decor[7][7] = true;
        decor[7][8] = true;
        decor[24][10] = true;
        decor[19][1] = true;
        decor[18][1] = true;
        decor[20][1] = true;
        decor[20][2] = true;
        decor[11][6] = true;
        decor[12][6] = true;
        decor[13][6] = true;
        decor[13][7] = true;
        decor[12][7] = true;
        decor[11][7] = true;
        decor[11][8] = true;
        decor[12][8] = true;
        decor[13][8] = true;
        decor[13][9] = true;
        decor[12][9] = true;
        decor[11][9] = true;
        decor[11][10] = true;
        decor[12][10] = true;
        decor[13][10] = true;
        decor[0][10] = true;
        decor[0][2] = true;
        decor[1][1] = true;
        decor[0][1] = true;
        decor[2][0] = true;
        decor[2][1] = true;
        decor[3][0] = true;
        decor[4][0] = true;
        decor[5][0] = true;
        decor[1][0] = true;

        road[9][0] = true;
        road[10][0] = true;
        road[10][1] = true;
        road[9][1] = true;
        road[9][2] = true;
        road[10][2] = true;
        road[10][3] = true;
        road[9][3] = true;
        road[9][4] = true;
        road[10][4] = true;
        road[9][5] = true;
        road[10][5] = true;
        road[9][6] = true;
        road[10][6] = true;
        road[9][7] = true;
        road[10][7] = true;
        road[9][8] = true;
        road[10][8] = true;
        road[9][9] = true;
        road[10][9] = true;
        road[9][10] = true;
        road[10][10] = true;
        road[9][11] = true;
        road[10][11] = true;
        road[9][12] = true;
        road[10][12] = true;
        road[9][13] = true;
        road[10][13] = true;
        road[9][14] = true;
        road[10][14] = true;
        road[9][15] = true;
        road[10][15] = true;
        road[10][16] = true;
        road[11][15] = true;
        road[11][16] = true;
        road[12][16] = true;
        road[12][15] = true;
        road[13][15] = true;
        road[13][16] = true;
        road[14][16] = true;
        road[14][15] = true;
        road[15][15] = true;
        road[14][14] = true;
        road[15][14] = true;
        road[14][13] = true;
        road[15][13] = true;
        road[14][12] = true;
        road[15][12] = true;
        road[15][11] = true;
        road[16][12] = true;
        road[16][13] = true;
        road[17][13] = true;
        road[17][14] = true;
        road[18][14] = true;
        road[18][13] = true;
        road[19][14] = true;
        road[19][13] = true;
        road[20][12] = true;
        road[21][11] = true;
        road[21][10] = true;
        road[20][10] = true;
        road[20][9] = true;
        road[19][9] = true;
        road[19][8] = true;
        road[20][8] = true;
        road[21][8] = true;
        road[22][8] = true;
        road[23][8] = true;
        road[23][7] = true;
        road[23][6] = true;
        road[23][5] = true;
        road[23][4] = true;
        road[23][3] = true;
        road[22][3] = true;
        road[22][4] = true;
        road[21][4] = true;
        road[21][3] = true;
        road[20][3] = true;
        road[20][4] = true;
        road[19][4] = true;
        road[19][3] = true;
        road[18][3] = true;
        road[18][4] = true;
        road[17][4] = true;
        road[17][3] = true;
        road[16][3] = true;
        road[16][4] = true;
        road[15][4] = true;
        road[15][3] = true;
        road[14][3] = true;
        road[14][4] = true;
        road[14][2] = true;
        road[15][2] = true;
        road[14][1] = true;
        road[15][1] = true;
        road[14][0] = true;
        road[15][0] = true;
        road[14][5] = true;
        road[15][5] = true;
        road[15][6] = true;
        road[14][6] = true;
        road[14][7] = true;
        road[15][7] = true;
        road[15][8] = true;
        road[14][8] = true;
        road[14][9] = true;
        road[15][9] = true;
        road[15][10] = true;
        road[14][10] = true;
        road[14][11] = true;
        road[19][12] = true;
        road[20][13] = true;
        road[20][11] = true;
        road[21][12] = true;
        road[24][4] = true;
        road[24][5] = true;
        road[24][6] = true;
        road[24][7] = true;
        road[8][12] = true;
        road[8][13] = true;
        road[7][13] = true;
        road[7][14] = true;
        road[6][14] = true;
        road[6][13] = true;
        road[5][13] = true;
        road[5][12] = true;
        road[4][12] = true;
        road[4][11] = true;
        road[3][11] = true;
        road[3][10] = true;
        road[4][10] = true;
        road[4][9] = true;
        road[5][9] = true;
        road[5][8] = true;
        road[4][8] = true;
        road[4][9] = true;
        road[3][8] = true;
        road[2][8] = true;
        road[1][8] = true;
        road[0][8] = true;
        road[0][7] = true;
        road[1][7] = true;
        road[1][6] = true;
        road[0][6] = true;
        road[0][5] = true;
        road[1][5] = true;
        road[1][4] = true;
        road[0][4] = true;
        road[1][3] = true;
        road[2][3] = true;
        road[2][4] = true;
        road[3][4] = true;
        road[3][3] = true;
        road[4][3] = true;
        road[4][4] = true;
        road[5][4] = true;
        road[5][3] = true;
        road[6][3] = true;
        road[6][4] = true;
        road[7][4] = true;
        road[7][3] = true;
        road[8][3] = true;
        road[8][4] = true;

        for (int y = 0; y < nbSquareY; y++) {
            for (int x = 0; x < nbSquareX; x++) {
                if (map[x][y] == null)
                    if (road[x][y])
                        map[x][y] = new Road(x, y);
                    else if (decor[x][y])
                        map[x][y] = new Decor(x, y);
                    else
                        map[x][y] = new Empty(x, y);
            }
        }
    }

}
