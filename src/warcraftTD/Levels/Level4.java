package warcraftTD.Levels;

import warcraftTD.Assets;
import warcraftTD.Position;
import warcraftTD.Tiles.Decor;
import warcraftTD.Tiles.Empty;
import warcraftTD.Tiles.Road;

public class Level4 extends Level {
    public Level4() {
        super();
        spritePath = Assets.level4;

        // remplie la liste de points par lequel les Bloons vont passer dans l'ordre.

        pathing.add(new Position(0, 0.439));
        pathing.add(new Position(0.024, 0.443));
        pathing.add(new Position(0.043, 0.465));
        pathing.add(new Position(0.069, 0.506));
        pathing.add(new Position(0.09, 0.556));
        pathing.add(new Position(0.102, 0.606));
        pathing.add(new Position(0.105, 0.654));
        pathing.add(new Position(0.103, 0.715));
        pathing.add(new Position(0.106, 0.788));
        pathing.add(new Position(0.123, 0.864));
        pathing.add(new Position(0.157, 0.91));
        pathing.add(new Position(0.199, 0.938));
        pathing.add(new Position(0.258, 0.938));
        pathing.add(new Position(0.31, 0.904));
        pathing.add(new Position(0.348, 0.854));
        pathing.add(new Position(0.392, 0.794));
        pathing.add(new Position(0.427, 0.775));
        pathing.add(new Position(0.482, 0.782));
        pathing.add(new Position(0.553, 0.8));
        pathing.add(new Position(0.61, 0.808));
        pathing.add(new Position(0.648, 0.781));
        pathing.add(new Position(0.674, 0.719));
        pathing.add(new Position(0.669, 0.642));
        pathing.add(new Position(0.643, 0.569));
        pathing.add(new Position(0.581, 0.531));
        pathing.add(new Position(0.507, 0.496));
        pathing.add(new Position(0.443, 0.506));
        pathing.add(new Position(0.377, 0.513));
        pathing.add(new Position(0.32, 0.475));
        pathing.add(new Position(0.271, 0.404));
        pathing.add(new Position(0.237, 0.335));
        pathing.add(new Position(0.229, 0.249));
        pathing.add(new Position(0.249, 0.147));
        pathing.add(new Position(0.302, 0.06));
        pathing.add(new Position(0.359, 0.017));
        pathing.add(new Position(0.443, 0.015));
        pathing.add(new Position(0.503, 0.067));
        pathing.add(new Position(0.539, 0.149));
        pathing.add(new Position(0.579, 0.228));
        pathing.add(new Position(0.624, 0.275));
        pathing.add(new Position(0.69, 0.324));
        pathing.add(new Position(0.756, 0.338));
        pathing.add(new Position(0.805, 0.349));

        // remplie la map de vide,d'obstacles ou de route...

        boolean[][] decor = new boolean[31][18];

        boolean[][] road = new boolean[31][18];

        road[0][9] = true;
        road[0][8] = true;
        road[0][7] = true;
        road[0][6] = true;
        road[1][6] = true;
        road[1][7] = true;
        road[1][8] = true;
        road[1][9] = true;
        road[2][9] = true;
        road[2][8] = true;
        road[2][7] = true;
        road[2][10] = true;
        road[2][11] = true;
        road[3][11] = true;
        road[3][10] = true;
        road[3][9] = true;
        road[4][10] = true;
        road[4][11] = true;
        road[4][12] = true;
        road[3][12] = true;
        road[2][12] = true;
        road[2][13] = true;
        road[3][13] = true;
        road[4][13] = true;
        road[4][14] = true;
        road[3][14] = true;
        road[2][14] = true;
        road[2][15] = true;
        road[3][15] = true;
        road[4][15] = true;
        road[4][16] = true;
        road[3][16] = true;
        road[4][17] = true;
        road[5][17] = true;
        road[5][16] = true;
        road[6][16] = true;
        road[6][17] = true;
        road[7][17] = true;
        road[7][16] = true;
        road[8][16] = true;
        road[8][17] = true;
        road[9][17] = true;
        road[9][16] = true;
        road[9][15] = true;
        road[8][15] = true;
        road[9][14] = true;
        road[10][14] = true;
        road[10][15] = true;
        road[10][16] = true;
        road[10][17] = true;
        road[11][16] = true;
        road[11][15] = true;
        road[11][14] = true;
        road[11][13] = true;
        road[12][13] = true;
        road[12][14] = true;
        road[12][15] = true;
        road[13][14] = true;
        road[13][13] = true;
        road[14][13] = true;
        road[14][14] = true;
        road[15][14] = true;
        road[15][13] = true;
        road[16][13] = true;
        road[16][14] = true;
        road[16][15] = true;
        road[17][15] = true;
        road[18][15] = true;
        road[18][14] = true;
        road[17][14] = true;
        road[17][13] = true;
        road[18][13] = true;
        road[19][13] = true;
        road[19][14] = true;
        road[19][15] = true;
        road[20][15] = true;
        road[20][14] = true;
        road[21][14] = true;
        road[21][13] = true;
        road[20][13] = true;
        road[20][12] = true;
        road[21][12] = true;
        road[21][11] = true;
        road[20][11] = true;
        road[20][10] = true;
        road[21][10] = true;
        road[20][9] = true;
        road[19][9] = true;
        road[19][10] = true;
        road[18][10] = true;
        road[18][9] = true;
        road[18][8] = true;
        road[17][8] = true;
        road[17][9] = true;
        road[17][10] = true;
        road[16][9] = true;
        road[16][8] = true;
        road[16][7] = true;
        road[15][7] = true;
        road[15][8] = true;
        road[15][9] = true;
        road[14][9] = true;
        road[14][8] = true;
        road[13][8] = true;
        road[13][9] = true;
        road[12][9] = true;
        road[12][8] = true;
        road[11][8] = true;
        road[11][9] = true;
        road[11][10] = true;
        road[12][10] = true;
        road[10][10] = true;
        road[10][9] = true;
        road[10][8] = true;
        road[9][8] = true;
        road[9][9] = true;
        road[9][7] = true;
        road[8][7] = true;
        road[8][8] = true;
        road[7][7] = true;
        road[8][6] = true;
        road[7][6] = true;
        road[6][6] = true;
        road[6][5] = true;
        road[7][5] = true;
        road[7][4] = true;
        road[6][4] = true;
        road[6][3] = true;
        road[7][3] = true;
        road[8][3] = true;
        road[8][2] = true;
        road[7][2] = true;
        road[7][1] = true;
        road[8][1] = true;
        road[8][0] = true;
        road[9][0] = true;
        road[9][1] = true;
        road[10][1] = true;
        road[10][0] = true;
        road[11][0] = true;
        road[11][1] = true;
        road[12][1] = true;
        road[12][0] = true;
        road[13][0] = true;
        road[13][1] = true;
        road[14][0] = true;
        road[14][1] = true;
        road[15][1] = true;
        road[15][0] = true;
        road[16][0] = true;
        road[16][1] = true;
        road[16][2] = true;
        road[15][2] = true;
        road[16][3] = true;
        road[17][2] = true;
        road[17][3] = true;
        road[17][4] = true;
        road[18][4] = true;
        road[18][3] = true;
        road[19][4] = true;
        road[18][5] = true;
        road[19][5] = true;
        road[19][6] = true;
        road[20][6] = true;
        road[20][5] = true;
        road[20][4] = true;
        road[21][4] = true;
        road[21][5] = true;
        road[21][6] = true;
        road[22][6] = true;
        road[22][5] = true;
        road[23][5] = true;
        road[23][6] = true;
        road[24][6] = true;
        road[24][5] = true;
        road[5][4] = true;
        road[13][10] = true;
        road[15][15] = true;
        road[19][3] = true;
        road[19][11] = true;
        for (int y = 0; y < nbSquareY; y++) {
            for (int x = 0; x < nbSquareX; x++) {
                if (map[x][y] == null)
                    if (road[x][y])
                        map[x][y] = new Road(x, y);
                    else if (decor[x][y])
                        map[x][y] = new Decor(x, y);
                    else
                        map[x][y] = new Empty(x, y);
            }
        }
    }

}
